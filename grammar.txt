S' -> S
S -> program id ; compound_stmt .
compound_stmt -> begin stmts M end
stmts -> stmt
stmts -> stmts M ; stmt
stmt -> init
init -> id := expr
stmt -> compound_stmt
stmt -> if_stmt
stmt -> for_stmt
stmt -> while M bool do M stmt
stmt -> epsilon
if_stmt -> if bool then M stmt
if_stmt -> if bool then M stmt N else M stmt
for_stmt -> for inc do M stmt M
for_stmt -> for dec do M stmt M
inc -> init to M expr
dec -> init downto M expr
bool ->  expr > expr
bool -> expr < expr
expr -> expr + expr
expr -> expr - expr
expr -> expr * expr
expr -> expr / expr
expr -> expr ^ factor
expr -> factor
factor -> id
factor -> num
factor -> ( expr )
M -> epsilon
N -> epsilon